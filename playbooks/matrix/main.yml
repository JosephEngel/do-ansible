---
- hosts: localhost
#  become: true

  vars_files:
    - vars/main.yml

  roles:
    - nginx

  tasks:
    - name: Copy Nginx server configuration in place.
      become: yes
      template:
        src: templates/matrix.conf.j2
        dest: /etc/nginx/conf.d/matrix.conf
        mode: 0644
      notify: restart nginx
      tags: nginx

#    - name: Pull synapse Container
#      containers.podman.podman_image:
#        name: "docker.io/avhost/docker-matrix"
#        tag: latest
#        pull: yes
#        state: present
#
#    - name: Restart synapse Container
#      containers.podman.podman_container:
#        name: matrix
#        image: avhost/docker-matrix
#        state: started
#        #restart: yes
#        recreate: yes
#        hostname: matrix.joeyengel.com
#        restart_policy: "no"
#        privileged: no #yes 
#        network: slirp4netns
#        publish: 
#          - 8008:8008
#          - 8448:8448
#        env:
#            PUID: '991'
#            PGID: '991'
#        volume:
#          - /matrixdata:/data:rw
#
#        detach: yes
#      tags: container-restart
    - name: Install required packages
      become: yes
      dnf:
        name: "{{ system_packages }}"
        state: present
      tags: requirements

    - name: Install the 'Development tools' package group
      become: yes
      dnf:
        name: '@Development tools'
        state: present
      tags: requirements

    - block:
        - name: Create synapse dir
          file:
            path: "{{ synapse_path }}"
            state: directory

        - name: Check if virtualenv exists
          stat:
            path: "{{ virtualenv_path }}"
          register: out_venv_exist
        - debug:
            var: out_venv_exist.stat.exists
        
        - name: Create virtualenv
          shell: "{{ pyenv_cmd }} virtualenv {{ venv_name }}"
          args:
            executable: /bin/bash
          when: out_venv_exist.stat.exists == False

        #- name: install pip packages
        #  pip:
        #    name: "{{ pip_packages }}"
        #    virtualenv: "{{ venv_name }}"
        #    state: latest
        #    #virtualenv_python: python3
        #    virtualenv_command: "{{ pyenv_cmd }}"
        
        - name: install pip packages
          shell: "source ~/.bashrc; {{ pyenv_cmd }} activate {{ venv_name }}; pip install --upgrade {{ pip_packages }}"
          args:
            executable: /bin/bash

      become: yes
      become_user: "{{ running_user }}"
      tags: create_venv

   # - name: Generate synapse configuration
   #   become: yes
   #   become_user: "{{ running_user }}"
   #   shell: cd "{{ virtualenv_path }}" && source 

